{"version":3,"sources":["utils/Logger.ts","utils/API.ts","pages/NewBoard/NewBoard.tsx","pages/Score/Score.tsx","pages/Boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Logger","enabled","debug","msg","value","this","console","log","API","key","fetch","method","mode","cache","credentials","headers","referrerPolicy","response","json","match","body","JSON","stringify","setToUpdate","NewBoard","useState","teamOne","setTeamOne","teamTwo","setTeamTwo","error","setError","history","useHistory","handleSubmit","e","a","preventDefault","createMatch","teamOneName","teamTwoName","sets","complete","result","URLSearchParams","append","push","className","onSubmit","onChange","target","name","type","defaultValue","Score","props","set","setSet","updateSet","teamNumber","increment","newSet","update","teamOneScore","teamTwoScore","matchKey","setNumber","onClick","Boards","useParams","dataKey","testWs","setTestWs","loaded","setLoaded","setMatch","matchComplete","setMatchComplete","ws","useRef","loadMatch","getMatch","length","useEffect","then","current","WebSocket","onopen","onclose","addNewSet","updatedMatch","saveMatch","updateMatchComplete","Object","assign","forEach","map","index","evt","test","onmessage","message","parse","data","Home","matches","setMatches","getMatches","catch","id","App","exact","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee22f442.chunk.js","sourcesContent":["export const Logger = {\n    enabled: true,\n    debug(msg: string, value?: Record<string, any>) {\n        if (this.enabled) {\n            console.debug(msg, value);\n        }\n    },\n\n    log(msg: string, value?: Record<string, any>) {\n        if (this.enabled) {\n            console.log(msg, value);\n        }\n    },\n};\n","import {Set} from '../pages/Boards/Boards';\nimport {Logger} from \"./Logger\";\n\nexport interface Match {\n  teamOneName: string;\n  teamTwoName: string;\n  key?: string;\n  complete: boolean;\n  sets: Set[];\n}\n\ninterface MatchResponse {\n  key: string;\n}\n\nexport class API {\n\n  static async getMatch(key: string): Promise<Match> {\n    const response = await fetch(`/scoreboard?key=${key}`, {\n      method: 'get',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      referrerPolicy: 'no-referrer'\n    });\n\n    return await response.json();\n  }\n\n  static async saveMatch(match: Match) {\n    Logger.log('saveMatch', {match});\n    const response = await fetch('/scoreboard', {\n      method: 'POST',\n      body: JSON.stringify(match),\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      referrerPolicy: 'no-referrer'\n    });\n\n    return await response.json();\n  }\n\n  static async createMatch(match: Match): Promise<MatchResponse> {\n    const response = await fetch('/scoreboard', {\n      method: 'PUT',\n      body: JSON.stringify(match),\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      referrerPolicy: 'no-referrer'\n    });\n\n    return await response.json();\n  }\n\n  static async updateSet(key: string, setToUpdate: Set): Promise<void> {\n    await fetch(`/scoreboard/${key}/set`, {\n      method: 'POST',\n      body: JSON.stringify(setToUpdate),\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      referrerPolicy: 'no-referrer'\n    });\n  }\n\n  static async getMatches() {\n    const response = await fetch(`/matches`, {\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      referrerPolicy: 'no-referrer'\n    });\n\n    return await response.json();\n  }\n}","import React, { FormEvent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Logger } from '../../utils/Logger';\nimport {API} from \"../../utils/API\";\n\nimport './NewBoard.css';\n\nfunction NewBoard() {\n    const [teamOne, setTeamOne] = useState('NHVC');\n    const [teamTwo, setTeamTwo] = useState('');\n    const [error, setError] = useState('');\n    const history = useHistory();\n\n    const handleSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n        Logger.log('handleSubmit', {\n            teamOne,\n            teamTwo,\n        });\n\n        if (teamOne === '' || teamTwo === '') {\n            setError('Please provide a name for both teams.');\n            return;\n        }\n\n        const result = await API.createMatch({teamOneName: teamOne, teamTwoName: teamTwo, sets: [], complete: false});\n        Logger.log('result', {\n            result,\n        });\n        const params = new URLSearchParams();\n        params.append('key', result.key);\n        history.push(`/boards/${result.key}`);\n    };\n\n    const handleChange = (e: FormEvent) => {\n        e.preventDefault();\n        setError('');\n        const target = e.target as HTMLInputElement;\n        Logger.log('handleChange', {\n            value: target.value,\n        });\n        if (target.name === 'teamOne') {\n            setTeamOne(target.value);\n        } else if (target.name === 'teamTwo') {\n            setTeamTwo(target.value);\n        }\n    };\n\n    return (\n        <div className=\"new-page\">\n            <h2>New ScoreBoard</h2>\n            <form onSubmit={handleSubmit} onChange={handleChange}>\n                <label>\n                    Team One:\n                    <input type=\"text\" name=\"teamOne\" defaultValue={teamOne} />\n                </label>\n                <label>\n                    Team Two:\n                    <input type=\"text\" name=\"teamTwo\" />\n                </label>\n                {error !== '' && <div className=\"error\">{error}</div>}\n                <input type=\"submit\" value=\"Create Scoreboard\" />\n            </form>\n        </div>\n    );\n}\n\nexport default NewBoard;\n","import React, {useState} from \"react\";\nimport {Set} from '../Boards/Boards';\nimport './Score.css';\nimport {API} from \"../../utils/API\";\nimport {Logger} from \"../../utils/Logger\";\n\ninterface ScorePropsInterface {\n  matchKey: string;\n  teamOneName: string;\n  teamTwoName: string;\n  set: Set;\n}\n\nfunction Score(props: ScorePropsInterface) {\n  const [set, setSet] = useState(props.set);\n\n  const updateSet = async function(teamNumber: number, increment: boolean) {\n    Logger.log('updateSet', {teamNumber, increment});\n    let newSet: Set|null = null;\n    let update: number;\n    if (increment) {\n      update = 1;\n    } else {\n      update = -1;\n    }\n\n    if (teamNumber === 1) {\n        const newScore = set.teamOneScore + update\n        if (newScore >= 0) {\n          newSet = {...set, teamOneScore: set.teamOneScore + update};\n        }\n    } else {\n      const newScore = set.teamOneScore + update\n      if (newScore >= 0) {\n        newSet = {...set, teamTwoScore: set.teamTwoScore + update};\n      }\n    }\n\n    if (newSet !== null) {\n      setSet(newSet);\n      await API.updateSet(props.matchKey, newSet);\n    }\n  }\n\n  return (\n      <div className=\"score-ctr\">\n        <div className=\"title-ctr\"><h3>Set {set.setNumber}</h3></div>\n        <div className=\"team-ctr\">\n          <h3>{props.teamOneName}</h3>\n          <div className=\"total-ctr\">{set.teamOneScore}</div>\n          {!props.set.complete &&\n          <div className=\"button-ctr\">\n            <button onClick={() => updateSet(1, true)}>+</button>\n            <button onClick={() => updateSet(1, false)}>-</button>\n          </div>\n          }\n        </div>\n        <div className=\"team-ctr\">\n          <h3>{props.teamTwoName}</h3>\n          <div className=\"total-ctr\">{set.teamTwoScore}</div>\n          {\n            !props.set.complete &&\n            <div className=\"button-ctr\">\n              <button onClick={() => updateSet(2, true)}>+</button>\n              <button onClick={() => updateSet(2, false)}>-</button>\n            </div>\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default Score;","import React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './Boards.css';\nimport Score from \"../Score/Score\";\nimport {API, Match} from \"../../utils/API\";\nimport {Logger} from \"../../utils/Logger\";\n\ninterface ParamsKey {\n    key: string;\n}\n\nexport interface Set {\n    setNumber: number\n    teamOneScore: number;\n    teamTwoScore: number;\n    complete: boolean;\n}\n\nconst URL = 'ws://localhost:3000/update';\n\nfunction Boards() {\n    const { key } = useParams<ParamsKey>();\n\n    console.log('key', { key });\n\n    const [dataKey] = useState(key as string);\n    const [testWs, setTestWs] = useState('');\n    const [loaded, setLoaded] = useState(false);\n    const [match, setMatch] = useState<Match>({teamOneName: '', teamTwoName: '', sets: [], complete: false});\n    const [matchComplete, setMatchComplete] = useState(false);\n    const ws: any = useRef(null);\n\n    const loadMatch = async () => {\n        Logger.log('loadMatch', {\n            dataKey\n        });\n        const match = await API.getMatch(dataKey);\n        Logger.log('match response', {\n            match\n        });\n        if (match.sets.length === 0) {\n            const newSet = {\n                setNumber: 1,\n                teamOneScore: 0,\n                teamTwoScore: 0,\n                complete: false\n            };\n            match.sets= [newSet];\n        }\n        Logger.log('Got match', {\n            match\n        });\n        setMatch(match);\n    };\n\n    useEffect(() => {\n        if (!loaded) {\n            loadMatch().then(() => {\n                Logger.log('loadComplete');\n                setLoaded(true);\n            });\n        }\n        ws.current = new WebSocket(URL);\n        ws.current.onopen = () => console.log('ws opened');\n        ws.current.onclose = () => console.log('ws closed');\n\n        return () => {\n            // ws.current.close();\n        };\n    });\n\n    const tryIt = () => {\n        console.log('tryIt', testWs);\n        const test = new WebSocket(testWs);\n        test.onopen = () => console.log('ws1 opened');\n        test.onclose = () => console.log('ws1 closed');\n\n        test.onmessage = (evt) => {\n            // on receiving a message, add it to the list of messages\n            const message = JSON.parse(evt.data);\n            console.log('message!!!!', message);\n        };\n    };\n\n    const addNewSet = async () => {\n        Logger.log('AddNewSet');\n        const updatedMatch = {...match,\n          sets: [...match.sets, {\n            setNumber: match.sets.length + 1,\n            teamOneScore: 0,\n            teamTwoScore: 0,\n            complete: false\n        }]};\n        setMatch(updatedMatch);\n        await API.saveMatch(updatedMatch);\n    }\n\n    const updateMatchComplete = async () => {\n        setMatchComplete(!matchComplete);\n        const updatedMatch = Object.assign({}, match);\n        updatedMatch.sets.forEach((set) => {\n            set.complete = !matchComplete\n        });\n        updatedMatch.complete = !matchComplete;\n        setMatch(updatedMatch);\n        await API.saveMatch(updatedMatch);\n    }\n\n    return (\n        <div className=\"boards-page\">\n            {match.sets.length !== 0 && <h2> Match {match.teamOneName} vs {match.teamTwoName}</h2>}\n            {match.sets.map((value, index) => {\n                  return <Score key={index} matchKey={key} set={value} teamOneName={match.teamOneName} teamTwoName={match.teamTwoName} />\n              })}\n          {!matchComplete && <button onClick={addNewSet}>Add Set</button>}\n          <button onClick={() => updateMatchComplete()}>{matchComplete ? 'Undo Match Over': 'Match Over'}</button>\n          <input onChange={(evt) => setTestWs(evt.target.value)} />\n\n          <button onClick={tryIt}>Try It</button>\n        </div>\n    );\n}\n\nexport default Boards;\n","import React, {useEffect, useState} from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nimport './Home.css';\nimport {Logger} from \"../../utils/Logger\";\nimport {API, Match} from \"../../utils/API\";\n\nfunction Home() {\n  const [matches, setMatches] = useState<Match[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const history = useHistory();\n\n  const getMatches = async () => {\n    const result = await API.getMatches();\n    Logger.log('Response from matches', {\n      matches: result.matches\n    });\n    setMatches(result.matches);\n  }\n\n  useEffect(() => {\n    Logger.log('useEffect', {\n      loaded\n    });\n    if (!loaded) {\n      setLoaded(true);\n      getMatches()\n        .then(()=> {\n          Logger.log('matches loaded.');\n        })\n        .catch(() => {\n          setLoaded(false);\n        });\n    }\n  }, [setLoaded, getMatches, loaded]);\n\n  function gotoBoard(key: string|undefined) {\n    if (!key) {\n      return;\n    }\n    const params = new URLSearchParams();\n    params.append('key', key);\n    history.push(`/boards/${key}`);\n  }\n\n  return (\n    <div className=\"home-page\">\n      {matches.length > 0 && matches.map((match, index) => {\n        return <div className={`match ${match.complete ? 'complete' : ''}`} key={index}>{match.teamOneName} VS {match.teamTwoName} <button id={match.key} onClick={(evt)=> gotoBoard(match.key)}>Go</button></div>\n      })}\n      <div>* Bolded matches are complete</div>\n   </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink,\n} from 'react-router-dom';\nimport './App.css';\nimport NewBoard from './pages/NewBoard/NewBoard';\nimport Boards from './pages/Boards/Boards';\nimport Home from \"./pages/Home/Home\";\n\nfunction App() {\n\n    return (\n        <Router>\n            <div className=\"app-ctr\">\n                <div className=\"nav-ctr\">\n                    <h3>Score Keeper</h3>\n                    <nav>\n                        <ul>\n                            <li>\n                                <NavLink exact to=\"/\">\n                                    Home\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/new\">New Board</NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/boards\">Boards</NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                </div>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/new\">\n                        <NewBoard />\n                    </Route>\n                    <Route path=\"/boards/:key\">\n                        <Boards />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}